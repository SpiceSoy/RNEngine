// ================================================================================================
//   @file Singleton.h
//  
//   @brief 
//   
//   @date 2023/10/01
// ================================================================================================

#pragma once

#include "Core/Common/GlobalMacro.h"
#include <memory>


namespace Rn
{
	class ISingleton
	{
	public:
		ISingleton() = default;

		virtual ~ISingleton() = default;

		//----------------------------------------------------------------------
		//! @brief
		//----------------------------------------------------------------------
		virtual void Initialize() = 0;

		//----------------------------------------------------------------------
		//! @brief
		//----------------------------------------------------------------------
		virtual void StartPlay() = 0;

		//----------------------------------------------------------------------
		//! @brief
		//! @param InDeltaTime
		//----------------------------------------------------------------------
		virtual void Tick( float InDeltaTime ) = 0;

		//----------------------------------------------------------------------
		//! @brief
		//----------------------------------------------------------------------
		virtual void EndPlay() = 0;
	};


	//----------------------------------------------------------------------
	//! @brief
	//! @tparam
	//----------------------------------------------------------------------
	export template < typename Ty >
	class TBaseSingleton
	{
	private:
		inline static std::unique_ptr< Ty >* instancePtr;

	protected:
		TBaseSingleton()
		{
		}

		virtual ~TBaseSingleton()
		{
		}

		//----------------------------------------------------------------------
		//! @brief
		//! @return
		//----------------------------------------------------------------------
		static Ty* GetInstancePtr()
		{
			if ( instancePtr == nullptr )
			{
				instancePtr = new Ty*();
			}

			return instancePtr;
		}

		//----------------------------------------------------------------------
		//! @brief
		//! @return
		//----------------------------------------------------------------------
		static Ty& GetInstance()
		{
			if ( instancePtr == nullptr )
			{
				instancePtr = new Ty*();
			}

			return *instancePtr;
		}

	public:
		//----------------------------------------------------------------------
		//! @brief
		//----------------------------------------------------------------------
		virtual void Initialize()
		{
		}

		//----------------------------------------------------------------------
		//! @brief
		//----------------------------------------------------------------------
		virtual void StartPlay()
		{
		}

		//----------------------------------------------------------------------
		//! @brief
		//! @param InDeltaTime
		//----------------------------------------------------------------------
		virtual void Tick( float InDeltaTime )
		{
		}

		//----------------------------------------------------------------------
		//! @brief
		//----------------------------------------------------------------------
		virtual void EndPlay()
		{
		}
	};
}
